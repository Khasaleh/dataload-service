from dataclasses import dataclass, field
from typing import Optional, List

@dataclass
class ProductImage:
    url: str
    is_main: bool

@dataclass
class ParsedAttribute:
    attribute_name: str # e.g., Color, Size
    attribute_value: str # e.g., Red, M

@dataclass
class SKU:
    product_name: str
    business_details_id: str # Keeping as str as per CSV, can be int later
    main_attribute_name: str # The primary attribute name given in main_attribute column

    # This will store pairs like [ParsedAttribute('Color', 'Red'), ParsedAttribute('Size', 'M')]
    # It's derived from 'attribute_combination' and 'main_attribute'
    attributes: List[ParsedAttribute]

    is_default_sku: bool
    price: float
    discount_price: Optional[float]
    quantity: int
    status: str # ACTIVE or INACTIVE
    published: str # Published or Unpublished
    order_limit: Optional[int]
    package_size_length: Optional[float]
    package_size_width: Optional[float]
    package_size_height: Optional[float]
    package_weight: Optional[float]
    images: List[ProductImage] = field(default_factory=list)

    # For tracking errors during parsing/validation
    errors: List[str] = field(default_factory=list)
    original_row_index: Optional[int] = None # To help identify the row in CSV

    # Fields to be populated after initial parsing, linking to a conceptual MainSKU
    # main_sku_id: Optional[str] = None # This would be an ID from the main_skus table
    # is_child_sku: bool = True # By definition, product_items.csv is for child SKUs


# --- Output Data Models for Database ---
# These represent the structure of data intended for different database tables.
# We'll need unique identifiers for MainSKUs and ChildSKUs.
# For now, we can use composite keys or generate temporary ones.

@dataclass
class MainSKUOutput:
    # Assuming a unique ID will be generated by the database or a pre-processing step.
    # For now, let's use product_name + business_details_id as a logical key.
    main_sku_identifier: str # e.g., "product_name|business_details_id"
    product_name: str
    business_details_id: str
    # The SKU marked as 'is_default_sku' in the CSV provides data for the Main SKU.
    # Fields like price, quantity at the "Main SKU" level might come from this default variant.
    # The problem states: "is_default_sku = true -> goes into main_skus with is_default = true"
    # This implies the main_skus table itself has an is_default flag, which is unusual if there's only one main SKU per product.
    # More likely: the properties of the default CSV SKU become the properties of the main_sku.
    # Let's assume main_skus has properties derived from the default child SKU.
    price: float # from the default child SKU
    discount_price: Optional[float] # from the default child SKU
    quantity: int # Sum of quantities of all variants, or from default? Spec is unclear. For now, from default.
    status: str # from the default child SKU
    published: str # from the default child SKU
    # main_attribute_name: str # The primary attribute, e.g. "Color"
    # The problem states: "Images (if any) for the main SKU level only"
    # and "create entries in product_images table, linked to main_skus.id"
    # This MainSKUOutput itself doesn't store images directly, but is linked to them.
    # It also needs to indicate which of its variants is the default one.
    default_child_sku_identifier: str # Identifier of the child SKU that is the default.
    original_row_index_of_default_source: Optional[int] = None


@dataclass
class ChildSKUOutput: # Represents a row in a 'skus' or 'product_variants' table
    child_sku_identifier: str # e.g., "product_name|business_details_id|attr_combo_hash" or CSV row index
    main_sku_identifier: str # Link to the MainSKUOutput
    product_name: str # For reference, though main_sku_identifier links it
    business_details_id: str # For reference

    # Specific attributes of this variant are in ProductVariantOutput
    # This table stores properties unique to this variant combination
    price: float
    discount_price: Optional[float]
    quantity: int
    status: str
    published: str
    order_limit: Optional[int]
    package_size_length: Optional[float]
    package_size_width: Optional[float]
    package_size_height: Optional[float]
    package_weight: Optional[float]
    is_default_in_group: bool # Was this the SKU marked 'is_default_sku' in the CSV for its product group?
    original_row_index: Optional[int] = None

@dataclass
class ProductImageOutput: # Represents a row in 'product_images' table
    image_id: str # e.g., "main_sku_id|image_url_hash" or auto-increment
    main_sku_identifier: str # FK to MainSKUOutput
    url: str
    is_main_image: bool # Is this the primary image for the MainSKU?
    original_row_index_of_source_sku: Optional[int] = None

@dataclass
class ProductVariantAttributeOutput: # Represents a row in 'product_variant' table (attribute assignments)
    variant_attribute_id: str # e.g., "child_sku_id|attribute_name_hash" or auto-increment
    child_sku_identifier: str # FK to ChildSKUOutput
    main_sku_identifier: str # FK to MainSKUOutput (denormalized or for context)
    attribute_name: str # e.g., Color, Size (or placeholder like secondary_attribute_1)
    attribute_value: str # e.g., Red, M
    # attribute_id: str # Actual DB ID for 'attribute_name' (lookup needed)
    # attribute_value_id: str # Actual DB ID for 'attribute_value' (lookup needed)
    original_row_index_of_source_sku: Optional[int] = None


# Example usage (for testing the dataclasses):
if __name__ == '__main__':
    img1 = ProductImage(url="https://example.com/image1.jpg", is_main=True)
    img2 = ProductImage(url="https://example.com/image2.jpg", is_main=False)

    attr1 = ParsedAttribute(attribute_name="Color", attribute_value="Red")
    attr2 = ParsedAttribute(attribute_name="Size", attribute_value="M")

    sku_example = SKU(
        product_name="Test Product",
        business_details_id="123",
        main_attribute_name="Color",
        attributes=[attr1, attr2],
        is_default_sku=True,
        price=100.0,
        discount_price=90.0,
        quantity=10,
        status="ACTIVE",
        published="Published",
        order_limit=5,
        package_size_length=10.0,
        package_size_width=10.0,
        package_size_height=10.0,
        package_weight=1.0,
        images=[img1, img2],
        original_row_index=1
    )
    print(sku_example)

    variant_example = ProductVariantEntry(
        sku_identifier="sku_abc_123",
        main_sku_identifier="main_sku_abc",
        attribute_id="attr_color_id",
        attribute_value_id="attr_val_red_id",
        attribute_name="Color",
        attribute_value="Red"
    )
    print(variant_example)
