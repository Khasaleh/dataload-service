{
	"info": {
		"_postman_id": "GENERATED_UUID",
		"name": "Catalog Service GraphQL API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"description": "Collection for the Catalog Data Load Service GraphQL API"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Generate Token",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation GenerateToken($username: String!, $password: String!) {\n  generateToken(input: {username: $username, password: $password}) {\n    token\n    tokenType\n    refreshToken\n  }\n}",
								"variables": "{\n  \"username\": \"testuser\",\n  \"password\": \"password\"\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Generates an access token and refresh token.\n\nDefault credentials (from `graphql_mutations.py`):\n- Username: `testuser`, Password: `password`\n- Username: `adminuser`, Password: `adminpassword`"
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation RefreshToken($refreshToken: String!) {\n  refreshToken(input: {refreshToken: $refreshToken}) {\n    token\n    tokenType\n    refreshToken\n  }\n}",
								"variables": "{\n  \"refreshToken\": \"YOUR_REFRESH_TOKEN_HERE\"\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Refreshes an access token using a refresh token."
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Get Current User (me)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetMe {\n  me {\n    userId\n    username\n    businessId\n    roles\n  }\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Retrieves information about the currently authenticated user. Requires Bearer token."
					},
					"response": []
				}
			]
		},
		{
			"name": "Upload Sessions",
			"item": [
				{
					"name": "Upload File",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "operations",
									"value": "{\n  \"query\": \"mutation UploadFile($file: Upload!, $loadType: String!) { uploadFile(file: $file, input: {loadType: $loadType}) { sessionId businessId loadType originalFilename wasabiPath status details recordCount errorCount createdAt updatedAt } }\",\n  \"variables\": {\n    \"file\": null,\n    \"loadType\": \"products\" \n  }\n}",
									"type": "text"
								},
								{
									"key": "map",
									"value": "{ \"0\": [\"variables.file\"] }",
									"type": "text"
								},
								{
									"key": "0",
									"type": "file",
									"src": "/path/to/your/file.csv"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Handles file upload. Requires Bearer token and multipart/form-data.\n\n**Important**: \n1. Set Bearer token auth for this request.\n2. In Postman, for the '0' key, select 'File' type and choose your CSV.\n3. `load_type` can be one of: `brands`, `attributes`, `return_policies`, `products`, `product_items`, `meta_tags` (based on `CELERY_TASK_MAP` in `graphql_mutations.py`)."
					},
					"response": []
				},
				{
					"name": "Get Upload Session by ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetUploadSession($sessionId: ID!) {\n  uploadSession(sessionId: $sessionId) {\n    sessionId\n    businessId\n    loadType\n    originalFilename\n    wasabiPath\n    status\n    details\n    recordCount\n    errorCount\n    createdAt\n    updatedAt\n  }\n}",
								"variables": "{\n  \"sessionId\": \"YOUR_SESSION_ID_HERE\"\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Retrieves a specific upload session by its ID. Requires Bearer token."
					},
					"response": []
				},
				{
					"name": "List Upload Sessions by Business",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ListSessions($skip: Int, $limit: Int) {\n  uploadSessionsByBusiness(skip: $skip, limit: $limit) {\n    sessionId\n    businessId\n    loadType\n    status\n    createdAt\n    updatedAt\n  }\n}",
								"variables": "{\n  \"skip\": 0,\n  \"limit\": 10\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Lists upload sessions for the current user's business. Requires Bearer token."
					},
					"response": []
				}
			]
		},
		{
			"name": "Pricing",
			"item": [
				{
					"name": "Upsert Price",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation UpsertPrice($input: PriceInput!) {\n  upsertPrice(input: $input) {\n    id\n    businessId\n    productId\n    skuId\n    price\n    discountPrice\n    costPrice\n    currency\n    createdAt\n    updatedAt\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"priceType\": \"PRODUCT\",\n    \"targetId\": \"123\", \n    \"price\": 199.99,\n    \"discountPrice\": 179.99,\n    \"costPrice\": 100.00,\n    \"currency\": \"USD\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Creates or updates a price for a product or SKU. Requires Bearer token.\n\n- `priceType` can be `PRODUCT` or `SKU`.\n- `targetId` is the ID of the product or SKU."
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8000",
			"type": "string",
			"description": "Base URL of the API. Change if your service runs elsewhere."
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string",
			"description": "Access token obtained from 'Generate Token' request. Should be set automatically if using Postman's scripting features."
		}
	]
}
